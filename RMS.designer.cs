#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AURMS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AURMS")]
	public partial class RMSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCampus(Campus instance);
    partial void UpdateCampus(Campus instance);
    partial void DeleteCampus(Campus instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventRoom(EventRoom instance);
    partial void UpdateEventRoom(EventRoom instance);
    partial void DeleteEventRoom(EventRoom instance);
    partial void InsertEventUser(EventUser instance);
    partial void UpdateEventUser(EventUser instance);
    partial void DeleteEventUser(EventUser instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertRequestEquipment(RequestEquipment instance);
    partial void UpdateRequestEquipment(RequestEquipment instance);
    partial void DeleteRequestEquipment(RequestEquipment instance);
    partial void InsertReservationRecord(ReservationRecord instance);
    partial void UpdateReservationRecord(ReservationRecord instance);
    partial void DeleteReservationRecord(ReservationRecord instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertRoomType(RoomType instance);
    partial void UpdateRoomType(RoomType instance);
    partial void DeleteRoomType(RoomType instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffGroup(StaffGroup instance);
    partial void UpdateStaffGroup(StaffGroup instance);
    partial void DeleteStaffGroup(StaffGroup instance);
    #endregion
		
		public RMSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AURMSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public RMSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RMSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RMSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public RMSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Campus> Campus
		{
			get
			{
				return this.GetTable<Campus>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipments
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventRoom> EventRooms
		{
			get
			{
				return this.GetTable<EventRoom>();
			}
		}
		
		public System.Data.Linq.Table<EventUser> EventUsers
		{
			get
			{
				return this.GetTable<EventUser>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<RequestEquipment> RequestEquipments
		{
			get
			{
				return this.GetTable<RequestEquipment>();
			}
		}
		
		public System.Data.Linq.Table<ReservationRecord> ReservationRecords
		{
			get
			{
				return this.GetTable<ReservationRecord>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<RoomType> RoomTypes
		{
			get
			{
				return this.GetTable<RoomType>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffGroup> StaffGroups
		{
			get
			{
				return this.GetTable<StaffGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Building")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _BuildingID;
		
		private long _CampusID;
		
		private string _BuildingName;
		
		private short _MinFloor;
		
		private short _MaxFloor;
		
		private EntitySet<Room> _Rooms;
		
		private EntityRef<Campus> _Campus;
		
		private EntityRef<Campus> _Campus1;
		
		private EntityRef<Campus> _Campus2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuildingIDChanging(long value);
    partial void OnBuildingIDChanged();
    partial void OnCampusIDChanging(long value);
    partial void OnCampusIDChanged();
    partial void OnBuildingNameChanging(string value);
    partial void OnBuildingNameChanged();
    partial void OnMinFloorChanging(short value);
    partial void OnMinFloorChanged();
    partial void OnMaxFloorChanging(short value);
    partial void OnMaxFloorChanged();
    #endregion
		
		public Building()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._Campus = default(EntityRef<Campus>);
			this._Campus1 = default(EntityRef<Campus>);
			this._Campus2 = default(EntityRef<Campus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long BuildingID
		{
			get
			{
				return this._BuildingID;
			}
			set
			{
				if ((this._BuildingID != value))
				{
					this.OnBuildingIDChanging(value);
					this.SendPropertyChanging();
					this._BuildingID = value;
					this.SendPropertyChanged("BuildingID");
					this.OnBuildingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusID", DbType="BigInt NOT NULL")]
		public long CampusID
		{
			get
			{
				return this._CampusID;
			}
			set
			{
				if ((this._CampusID != value))
				{
					if (((this._Campus.HasLoadedOrAssignedValue || this._Campus1.HasLoadedOrAssignedValue) 
								|| this._Campus2.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCampusIDChanging(value);
					this.SendPropertyChanging();
					this._CampusID = value;
					this.SendPropertyChanged("CampusID");
					this.OnCampusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string BuildingName
		{
			get
			{
				return this._BuildingName;
			}
			set
			{
				if ((this._BuildingName != value))
				{
					this.OnBuildingNameChanging(value);
					this.SendPropertyChanging();
					this._BuildingName = value;
					this.SendPropertyChanged("BuildingName");
					this.OnBuildingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinFloor", DbType="SmallInt NOT NULL")]
		public short MinFloor
		{
			get
			{
				return this._MinFloor;
			}
			set
			{
				if ((this._MinFloor != value))
				{
					this.OnMinFloorChanging(value);
					this.SendPropertyChanging();
					this._MinFloor = value;
					this.SendPropertyChanged("MinFloor");
					this.OnMinFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxFloor", DbType="SmallInt NOT NULL")]
		public short MaxFloor
		{
			get
			{
				return this._MaxFloor;
			}
			set
			{
				if ((this._MaxFloor != value))
				{
					this.OnMaxFloorChanging(value);
					this.SendPropertyChanging();
					this._MaxFloor = value;
					this.SendPropertyChanged("MaxFloor");
					this.OnMaxFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_Room", Storage="_Rooms", ThisKey="BuildingID", OtherKey="BuildingID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Building", Storage="_Campus", ThisKey="CampusID", OtherKey="CampusID", IsForeignKey=true)]
		public Campus Campus
		{
			get
			{
				return this._Campus.Entity;
			}
			set
			{
				Campus previousValue = this._Campus.Entity;
				if (((previousValue != value) 
							|| (this._Campus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Campus.Entity = null;
						previousValue.Buildings.Remove(this);
					}
					this._Campus.Entity = value;
					if ((value != null))
					{
						value.Buildings.Add(this);
						this._CampusID = value.CampusID;
					}
					else
					{
						this._CampusID = default(long);
					}
					this.SendPropertyChanged("Campus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Building1", Storage="_Campus1", ThisKey="CampusID", OtherKey="CampusID", IsForeignKey=true)]
		public Campus Campus1
		{
			get
			{
				return this._Campus1.Entity;
			}
			set
			{
				Campus previousValue = this._Campus1.Entity;
				if (((previousValue != value) 
							|| (this._Campus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Campus1.Entity = null;
						previousValue.Buildings1.Remove(this);
					}
					this._Campus1.Entity = value;
					if ((value != null))
					{
						value.Buildings1.Add(this);
						this._CampusID = value.CampusID;
					}
					else
					{
						this._CampusID = default(long);
					}
					this.SendPropertyChanged("Campus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Building2", Storage="_Campus2", ThisKey="CampusID", OtherKey="CampusID", IsForeignKey=true)]
		public Campus Campus2
		{
			get
			{
				return this._Campus2.Entity;
			}
			set
			{
				Campus previousValue = this._Campus2.Entity;
				if (((previousValue != value) 
							|| (this._Campus2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Campus2.Entity = null;
						previousValue.Buildings2.Remove(this);
					}
					this._Campus2.Entity = value;
					if ((value != null))
					{
						value.Buildings2.Add(this);
						this._CampusID = value.CampusID;
					}
					else
					{
						this._CampusID = default(long);
					}
					this.SendPropertyChanged("Campus2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserID;
		
		private string _UserCode;
		
		private string _Role;
		
		private string _Email;
		
		private long _GroupID;
		
		private EntitySet<ReservationRecord> _ReservationRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnUserCodeChanging(string value);
    partial void OnUserCodeChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGroupIDChanging(long value);
    partial void OnGroupIDChanged();
    #endregion
		
		public User()
		{
			this._ReservationRecords = new EntitySet<ReservationRecord>(new Action<ReservationRecord>(this.attach_ReservationRecords), new Action<ReservationRecord>(this.detach_ReservationRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string UserCode
		{
			get
			{
				return this._UserCode;
			}
			set
			{
				if ((this._UserCode != value))
				{
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._UserCode = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="BigInt NOT NULL")]
		public long GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReservationRecord", Storage="_ReservationRecords", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<ReservationRecord> ReservationRecords
		{
			get
			{
				return this._ReservationRecords;
			}
			set
			{
				this._ReservationRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationRecords(ReservationRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ReservationRecords(ReservationRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Campus")]
	public partial class Campus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CampusID;
		
		private string _CampusName;
		
		private EntitySet<Building> _Buildings;
		
		private EntitySet<Building> _Buildings1;
		
		private EntitySet<Building> _Buildings2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampusIDChanging(long value);
    partial void OnCampusIDChanged();
    partial void OnCampusNameChanging(string value);
    partial void OnCampusNameChanged();
    #endregion
		
		public Campus()
		{
			this._Buildings = new EntitySet<Building>(new Action<Building>(this.attach_Buildings), new Action<Building>(this.detach_Buildings));
			this._Buildings1 = new EntitySet<Building>(new Action<Building>(this.attach_Buildings1), new Action<Building>(this.detach_Buildings1));
			this._Buildings2 = new EntitySet<Building>(new Action<Building>(this.attach_Buildings2), new Action<Building>(this.detach_Buildings2));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CampusID
		{
			get
			{
				return this._CampusID;
			}
			set
			{
				if ((this._CampusID != value))
				{
					this.OnCampusIDChanging(value);
					this.SendPropertyChanging();
					this._CampusID = value;
					this.SendPropertyChanged("CampusID");
					this.OnCampusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CampusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CampusName
		{
			get
			{
				return this._CampusName;
			}
			set
			{
				if ((this._CampusName != value))
				{
					this.OnCampusNameChanging(value);
					this.SendPropertyChanging();
					this._CampusName = value;
					this.SendPropertyChanged("CampusName");
					this.OnCampusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Building", Storage="_Buildings", ThisKey="CampusID", OtherKey="CampusID")]
		public EntitySet<Building> Buildings
		{
			get
			{
				return this._Buildings;
			}
			set
			{
				this._Buildings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Building1", Storage="_Buildings1", ThisKey="CampusID", OtherKey="CampusID")]
		public EntitySet<Building> Buildings1
		{
			get
			{
				return this._Buildings1;
			}
			set
			{
				this._Buildings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campus_Building2", Storage="_Buildings2", ThisKey="CampusID", OtherKey="CampusID")]
		public EntitySet<Building> Buildings2
		{
			get
			{
				return this._Buildings2;
			}
			set
			{
				this._Buildings2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Buildings(Building entity)
		{
			this.SendPropertyChanging();
			entity.Campus = this;
		}
		
		private void detach_Buildings(Building entity)
		{
			this.SendPropertyChanging();
			entity.Campus = null;
		}
		
		private void attach_Buildings1(Building entity)
		{
			this.SendPropertyChanging();
			entity.Campus1 = this;
		}
		
		private void detach_Buildings1(Building entity)
		{
			this.SendPropertyChanging();
			entity.Campus1 = null;
		}
		
		private void attach_Buildings2(Building entity)
		{
			this.SendPropertyChanging();
			entity.Campus2 = this;
		}
		
		private void detach_Buildings2(Building entity)
		{
			this.SendPropertyChanging();
			entity.Campus2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EquipmentID;
		
		private long _StaffGroupID;
		
		private string _EquipmentName;
		
		private EntitySet<RequestEquipment> _RequestEquipments;
		
		private EntityRef<StaffGroup> _StaffGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipmentIDChanging(long value);
    partial void OnEquipmentIDChanged();
    partial void OnStaffGroupIDChanging(long value);
    partial void OnStaffGroupIDChanged();
    partial void OnEquipmentNameChanging(string value);
    partial void OnEquipmentNameChanged();
    #endregion
		
		public Equipment()
		{
			this._RequestEquipments = new EntitySet<RequestEquipment>(new Action<RequestEquipment>(this.attach_RequestEquipments), new Action<RequestEquipment>(this.detach_RequestEquipments));
			this._StaffGroup = default(EntityRef<StaffGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffGroupID", DbType="BigInt NOT NULL")]
		public long StaffGroupID
		{
			get
			{
				return this._StaffGroupID;
			}
			set
			{
				if ((this._StaffGroupID != value))
				{
					if (this._StaffGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffGroupIDChanging(value);
					this.SendPropertyChanging();
					this._StaffGroupID = value;
					this.SendPropertyChanged("StaffGroupID");
					this.OnStaffGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string EquipmentName
		{
			get
			{
				return this._EquipmentName;
			}
			set
			{
				if ((this._EquipmentName != value))
				{
					this.OnEquipmentNameChanging(value);
					this.SendPropertyChanging();
					this._EquipmentName = value;
					this.SendPropertyChanged("EquipmentName");
					this.OnEquipmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_RequestEquipment", Storage="_RequestEquipments", ThisKey="EquipmentID", OtherKey="EquipmentID")]
		public EntitySet<RequestEquipment> RequestEquipments
		{
			get
			{
				return this._RequestEquipments;
			}
			set
			{
				this._RequestEquipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffGroup_Equipment", Storage="_StaffGroup", ThisKey="StaffGroupID", OtherKey="StaffGroupID", IsForeignKey=true)]
		public StaffGroup StaffGroup
		{
			get
			{
				return this._StaffGroup.Entity;
			}
			set
			{
				StaffGroup previousValue = this._StaffGroup.Entity;
				if (((previousValue != value) 
							|| (this._StaffGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffGroup.Entity = null;
						previousValue.Equipments.Remove(this);
					}
					this._StaffGroup.Entity = value;
					if ((value != null))
					{
						value.Equipments.Add(this);
						this._StaffGroupID = value.StaffGroupID;
					}
					else
					{
						this._StaffGroupID = default(long);
					}
					this.SendPropertyChanged("StaffGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestEquipments(RequestEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_RequestEquipments(RequestEquipment entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private string _EventName;
		
		private string _EventStartDate;
		
		private string _EventEndDate;
		
		private string _EventStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventStartDateChanging(string value);
    partial void OnEventStartDateChanged();
    partial void OnEventEndDateChanging(string value);
    partial void OnEventEndDateChanged();
    partial void OnEventStatusChanging(string value);
    partial void OnEventStatusChanged();
    #endregion
		
		public Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStartDate", DbType="NVarChar(10)")]
		public string EventStartDate
		{
			get
			{
				return this._EventStartDate;
			}
			set
			{
				if ((this._EventStartDate != value))
				{
					this.OnEventStartDateChanging(value);
					this.SendPropertyChanging();
					this._EventStartDate = value;
					this.SendPropertyChanged("EventStartDate");
					this.OnEventStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventEndDate", DbType="NVarChar(10)")]
		public string EventEndDate
		{
			get
			{
				return this._EventEndDate;
			}
			set
			{
				if ((this._EventEndDate != value))
				{
					this.OnEventEndDateChanging(value);
					this.SendPropertyChanging();
					this._EventEndDate = value;
					this.SendPropertyChanged("EventEndDate");
					this.OnEventEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStatus", DbType="NVarChar(5)")]
		public string EventStatus
		{
			get
			{
				return this._EventStatus;
			}
			set
			{
				if ((this._EventStatus != value))
				{
					this.OnEventStatusChanging(value);
					this.SendPropertyChanging();
					this._EventStatus = value;
					this.SendPropertyChanged("EventStatus");
					this.OnEventStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventRoom")]
	public partial class EventRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private long _RoomID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnRoomIDChanging(long value);
    partial void OnRoomIDChanged();
    #endregion
		
		public EventRoom()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventUser")]
	public partial class EventUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EventID;
		
		private string _UserCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(long value);
    partial void OnEventIDChanged();
    partial void OnUserCodeChanging(string value);
    partial void OnUserCodeChanged();
    #endregion
		
		public EventUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserCode
		{
			get
			{
				return this._UserCode;
			}
			set
			{
				if ((this._UserCode != value))
				{
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._UserCode = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GroupID;
		
		private string _GroupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(long value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public Group()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestEquipment")]
	public partial class RequestEquipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EquipmentRequestID;
		
		private long _ReservationRecordID;
		
		private long _EquipmentID;
		
		private short _Number;
		
		private EntityRef<Equipment> _Equipment;
		
		private EntityRef<ReservationRecord> _ReservationRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipmentRequestIDChanging(long value);
    partial void OnEquipmentRequestIDChanged();
    partial void OnReservationRecordIDChanging(long value);
    partial void OnReservationRecordIDChanged();
    partial void OnEquipmentIDChanging(long value);
    partial void OnEquipmentIDChanged();
    partial void OnNumberChanging(short value);
    partial void OnNumberChanged();
    #endregion
		
		public RequestEquipment()
		{
			this._Equipment = default(EntityRef<Equipment>);
			this._ReservationRecord = default(EntityRef<ReservationRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentRequestID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long EquipmentRequestID
		{
			get
			{
				return this._EquipmentRequestID;
			}
			set
			{
				if ((this._EquipmentRequestID != value))
				{
					this.OnEquipmentRequestIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentRequestID = value;
					this.SendPropertyChanged("EquipmentRequestID");
					this.OnEquipmentRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationRecordID", DbType="BigInt NOT NULL")]
		public long ReservationRecordID
		{
			get
			{
				return this._ReservationRecordID;
			}
			set
			{
				if ((this._ReservationRecordID != value))
				{
					if (this._ReservationRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationRecordIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationRecordID = value;
					this.SendPropertyChanged("ReservationRecordID");
					this.OnReservationRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="BigInt NOT NULL")]
		public long EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="SmallInt NOT NULL")]
		public short Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_RequestEquipment", Storage="_Equipment", ThisKey="EquipmentID", OtherKey="EquipmentID", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.RequestEquipments.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.RequestEquipments.Add(this);
						this._EquipmentID = value.EquipmentID;
					}
					else
					{
						this._EquipmentID = default(long);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationRecord_RequestEquipment", Storage="_ReservationRecord", ThisKey="ReservationRecordID", OtherKey="ReservationRecordID", IsForeignKey=true)]
		public ReservationRecord ReservationRecord
		{
			get
			{
				return this._ReservationRecord.Entity;
			}
			set
			{
				ReservationRecord previousValue = this._ReservationRecord.Entity;
				if (((previousValue != value) 
							|| (this._ReservationRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationRecord.Entity = null;
						previousValue.RequestEquipments.Remove(this);
					}
					this._ReservationRecord.Entity = value;
					if ((value != null))
					{
						value.RequestEquipments.Add(this);
						this._ReservationRecordID = value.ReservationRecordID;
					}
					else
					{
						this._ReservationRecordID = default(long);
					}
					this.SendPropertyChanged("ReservationRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationRecord")]
	public partial class ReservationRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ReservationRecordID;
		
		private long _UserID;
		
		private long _RoomID;
		
		private string _Date;
		
		private string _StartTime;
		
		private string _EndTime;
		
		private string _Detail;
		
		private short _Status;
		
		private EntitySet<RequestEquipment> _RequestEquipments;
		
		private EntityRef<User> _User;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationRecordIDChanging(long value);
    partial void OnReservationRecordIDChanged();
    partial void OnUserIDChanging(long value);
    partial void OnUserIDChanged();
    partial void OnRoomIDChanging(long value);
    partial void OnRoomIDChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    #endregion
		
		public ReservationRecord()
		{
			this._RequestEquipments = new EntitySet<RequestEquipment>(new Action<RequestEquipment>(this.attach_RequestEquipments), new Action<RequestEquipment>(this.detach_RequestEquipments));
			this._User = default(EntityRef<User>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationRecordID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ReservationRecordID
		{
			get
			{
				return this._ReservationRecordID;
			}
			set
			{
				if ((this._ReservationRecordID != value))
				{
					this.OnReservationRecordIDChanging(value);
					this.SendPropertyChanging();
					this._ReservationRecordID = value;
					this.SendPropertyChanged("ReservationRecordID");
					this.OnReservationRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="BigInt NOT NULL")]
		public long UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="BigInt NOT NULL")]
		public long RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(200)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationRecord_RequestEquipment", Storage="_RequestEquipments", ThisKey="ReservationRecordID", OtherKey="ReservationRecordID")]
		public EntitySet<RequestEquipment> RequestEquipments
		{
			get
			{
				return this._RequestEquipments;
			}
			set
			{
				this._RequestEquipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReservationRecord", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ReservationRecords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ReservationRecords.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationRecord", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.ReservationRecords.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.ReservationRecords.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(long);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestEquipments(RequestEquipment entity)
		{
			this.SendPropertyChanging();
			entity.ReservationRecord = this;
		}
		
		private void detach_RequestEquipments(RequestEquipment entity)
		{
			this.SendPropertyChanging();
			entity.ReservationRecord = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoomID;
		
		private long _BuildingID;
		
		private long _RoomTypeID;
		
		private short _Floor;
		
		private string _RoomName;
		
		private string _OpenTime;
		
		private string _CloseTime;
		
		private System.Nullable<short> _Seat;
		
		private string _Detail;
		
		private EntitySet<ReservationRecord> _ReservationRecords;
		
		private EntityRef<Building> _Building;
		
		private EntityRef<RoomType> _RoomType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(long value);
    partial void OnRoomIDChanged();
    partial void OnBuildingIDChanging(long value);
    partial void OnBuildingIDChanged();
    partial void OnRoomTypeIDChanging(long value);
    partial void OnRoomTypeIDChanged();
    partial void OnFloorChanging(short value);
    partial void OnFloorChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnOpenTimeChanging(string value);
    partial void OnOpenTimeChanged();
    partial void OnCloseTimeChanging(string value);
    partial void OnCloseTimeChanged();
    partial void OnSeatChanging(System.Nullable<short> value);
    partial void OnSeatChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
		
		public Room()
		{
			this._ReservationRecords = new EntitySet<ReservationRecord>(new Action<ReservationRecord>(this.attach_ReservationRecords), new Action<ReservationRecord>(this.detach_ReservationRecords));
			this._Building = default(EntityRef<Building>);
			this._RoomType = default(EntityRef<RoomType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingID", DbType="BigInt NOT NULL")]
		public long BuildingID
		{
			get
			{
				return this._BuildingID;
			}
			set
			{
				if ((this._BuildingID != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingIDChanging(value);
					this.SendPropertyChanging();
					this._BuildingID = value;
					this.SendPropertyChanged("BuildingID");
					this.OnBuildingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", DbType="BigInt NOT NULL")]
		public long RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					if (this._RoomType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="SmallInt NOT NULL")]
		public short Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenTime", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string OpenTime
		{
			get
			{
				return this._OpenTime;
			}
			set
			{
				if ((this._OpenTime != value))
				{
					this.OnOpenTimeChanging(value);
					this.SendPropertyChanging();
					this._OpenTime = value;
					this.SendPropertyChanged("OpenTime");
					this.OnOpenTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseTime", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string CloseTime
		{
			get
			{
				return this._CloseTime;
			}
			set
			{
				if ((this._CloseTime != value))
				{
					this.OnCloseTimeChanging(value);
					this.SendPropertyChanging();
					this._CloseTime = value;
					this.SendPropertyChanged("CloseTime");
					this.OnCloseTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seat", DbType="SmallInt")]
		public System.Nullable<short> Seat
		{
			get
			{
				return this._Seat;
			}
			set
			{
				if ((this._Seat != value))
				{
					this.OnSeatChanging(value);
					this.SendPropertyChanging();
					this._Seat = value;
					this.SendPropertyChanged("Seat");
					this.OnSeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="NVarChar(200)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_ReservationRecord", Storage="_ReservationRecords", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<ReservationRecord> ReservationRecords
		{
			get
			{
				return this._ReservationRecords;
			}
			set
			{
				this._ReservationRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_Room", Storage="_Building", ThisKey="BuildingID", OtherKey="BuildingID", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._BuildingID = value.BuildingID;
					}
					else
					{
						this._BuildingID = default(long);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomType_Room", Storage="_RoomType", ThisKey="RoomTypeID", OtherKey="RoomTypeID", IsForeignKey=true)]
		public RoomType RoomType
		{
			get
			{
				return this._RoomType.Entity;
			}
			set
			{
				RoomType previousValue = this._RoomType.Entity;
				if (((previousValue != value) 
							|| (this._RoomType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoomType.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._RoomType.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._RoomTypeID = value.RoomTypeID;
					}
					else
					{
						this._RoomTypeID = default(long);
					}
					this.SendPropertyChanged("RoomType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservationRecords(ReservationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_ReservationRecords(ReservationRecord entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoomType")]
	public partial class RoomType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RoomTypeID;
		
		private string _RoomTypeName;
		
		private EntitySet<Room> _Rooms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomTypeIDChanging(long value);
    partial void OnRoomTypeIDChanged();
    partial void OnRoomTypeNameChanging(string value);
    partial void OnRoomTypeNameChanged();
    #endregion
		
		public RoomType()
		{
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RoomTypeID
		{
			get
			{
				return this._RoomTypeID;
			}
			set
			{
				if ((this._RoomTypeID != value))
				{
					this.OnRoomTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeID = value;
					this.SendPropertyChanged("RoomTypeID");
					this.OnRoomTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string RoomTypeName
		{
			get
			{
				return this._RoomTypeName;
			}
			set
			{
				if ((this._RoomTypeName != value))
				{
					this.OnRoomTypeNameChanging(value);
					this.SendPropertyChanging();
					this._RoomTypeName = value;
					this.SendPropertyChanged("RoomTypeName");
					this.OnRoomTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoomType_Room", Storage="_Rooms", ThisKey="RoomTypeID", OtherKey="RoomTypeID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomType = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.RoomType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StaffID;
		
		private long _StaffGroupID;
		
		private string _StaffCode;
		
		private EntityRef<StaffGroup> _StaffGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(long value);
    partial void OnStaffIDChanged();
    partial void OnStaffGroupIDChanging(long value);
    partial void OnStaffGroupIDChanged();
    partial void OnStaffCodeChanging(string value);
    partial void OnStaffCodeChanged();
    #endregion
		
		public Staff()
		{
			this._StaffGroup = default(EntityRef<StaffGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffGroupID", DbType="BigInt NOT NULL")]
		public long StaffGroupID
		{
			get
			{
				return this._StaffGroupID;
			}
			set
			{
				if ((this._StaffGroupID != value))
				{
					if (this._StaffGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffGroupIDChanging(value);
					this.SendPropertyChanging();
					this._StaffGroupID = value;
					this.SendPropertyChanged("StaffGroupID");
					this.OnStaffGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string StaffCode
		{
			get
			{
				return this._StaffCode;
			}
			set
			{
				if ((this._StaffCode != value))
				{
					this.OnStaffCodeChanging(value);
					this.SendPropertyChanging();
					this._StaffCode = value;
					this.SendPropertyChanged("StaffCode");
					this.OnStaffCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffGroup_Staff", Storage="_StaffGroup", ThisKey="StaffGroupID", OtherKey="StaffGroupID", IsForeignKey=true)]
		public StaffGroup StaffGroup
		{
			get
			{
				return this._StaffGroup.Entity;
			}
			set
			{
				StaffGroup previousValue = this._StaffGroup.Entity;
				if (((previousValue != value) 
							|| (this._StaffGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffGroup.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffGroup.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffGroupID = value.StaffGroupID;
					}
					else
					{
						this._StaffGroupID = default(long);
					}
					this.SendPropertyChanged("StaffGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffGroup")]
	public partial class StaffGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StaffGroupID;
		
		private string _StaffGroupName;
		
		private EntitySet<Equipment> _Equipments;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffGroupIDChanging(long value);
    partial void OnStaffGroupIDChanged();
    partial void OnStaffGroupNameChanging(string value);
    partial void OnStaffGroupNameChanged();
    #endregion
		
		public StaffGroup()
		{
			this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffGroupID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long StaffGroupID
		{
			get
			{
				return this._StaffGroupID;
			}
			set
			{
				if ((this._StaffGroupID != value))
				{
					this.OnStaffGroupIDChanging(value);
					this.SendPropertyChanging();
					this._StaffGroupID = value;
					this.SendPropertyChanged("StaffGroupID");
					this.OnStaffGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffGroupName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string StaffGroupName
		{
			get
			{
				return this._StaffGroupName;
			}
			set
			{
				if ((this._StaffGroupName != value))
				{
					this.OnStaffGroupNameChanging(value);
					this.SendPropertyChanging();
					this._StaffGroupName = value;
					this.SendPropertyChanged("StaffGroupName");
					this.OnStaffGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffGroup_Equipment", Storage="_Equipments", ThisKey="StaffGroupID", OtherKey="StaffGroupID")]
		public EntitySet<Equipment> Equipments
		{
			get
			{
				return this._Equipments;
			}
			set
			{
				this._Equipments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffGroup_Staff", Storage="_Staffs", ThisKey="StaffGroupID", OtherKey="StaffGroupID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.StaffGroup = this;
		}
		
		private void detach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.StaffGroup = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffGroup = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffGroup = null;
		}
	}
}
#pragma warning restore 1591
